"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-8@go#@fc%97-k&&k_11!3g@oi218-1p085^lf@d1dohr%n@@za'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    "unfold",  # before django.contrib.admin
    'modeltranslation',
    'django.contrib.sites',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.flatpages',

    "corsheaders",
    "backend",
]

SITE_ID = 1

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.contrib.flatpages.middleware.FlatpageFallbackMiddleware',

    "corsheaders.middleware.CorsMiddleware",
]

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'ru-ru'

TIME_ZONE = 'Europe/Moscow'

USE_I18N = True

USE_TZ = True

gettext = lambda s: s
LANGUAGES = (
    ('ru', gettext('Russia')),
    ('en', gettext('English')),
    ('uk', gettext('Ukraine')),
)


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'core/static'),
]


# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

MEDIA_URL = '/frontend/public/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'frontend/public/')

CSRF_TRUSTED_ORIGINS = ['http://localhost:5173', 'http://localhost:8000']
CORS_ALLOWED_ORIGINS = ["http://localhost:5173", "http://localhost:8000"]  # Make sure the port number matches the one you're using for the React app.
CORS_ALLOW_CREDENTIALS = True

CORS_ALLOW_HEADERS = [
    'authorization',
    'content-type',
    'x-csrftoken',
]

CORS_ALLOW_METHODS = [
    'GET',
    'POST',
    'PUT',
    'PATCH',
    'DELETE',
    'OPTIONS'
]

AUTH_USER_MODEL = 'backend.Client'

# UNFOLD

from django.templatetags.static import static

UNFOLD = {
    "SITE_TITLE": "DiscountsOnServices",
    "SITE_HEADER": "DiscountsOnServices",
    # "SITE_URL": "/",
    "SITE_ICON": lambda request: static("icons/logo.svg"),  # both modes, optimise for 32px height
    # "SITE_ICON": {
    #     "light": lambda request: static("icon-light.svg"),  # light mode
    #     "dark": lambda request: static("icon-dark.svg"),  # dark mode
    # },
    "SITE_LOGO": {
        "light": lambda request: static("icons/logo.svg"),  # light mode
        "dark": lambda request: static("icons/logo.svg"),  # dark mode
    },
    "SITE_SYMBOL": "speed",  # symbol from icon set
    "SITE_FAVICONS": [
        {
            "rel": "icon",
            "sizes": "32x32",
            "type": "image/svg+xml",
            "href": lambda request: static("icons/logo.svg"),
        },
    ],
    # "SHOW_HISTORY": True,  # show/hide "History" button, default: True
    # "SHOW_VIEW_ON_SITE": True, # show/hide "View on site" button, default: True
    "ENVIRONMENT": "core.settings.environment_callback",
    "DASHBOARD_CALLBACK": "core.settings.dashboard_callback",
    # "THEME": "dark", # Force theme: "dark" or "light". Will disable theme switcher
    # "LOGIN": {
    #     "image": lambda request: static("icons/logo.svg"),
    #     "redirect_after": lambda request: reverse_lazy("admin:APP_MODEL_changelist"),
    # },
    "STYLES": [
        lambda request: static("css/styles.css"),
    ],
    # "SCRIPTS": [
    #     lambda request: static("js/script.js"),
    # ],
    # "COLORS": {
    #     "font": {
    #         "subtle-light": "107 114 128",
    #         "subtle-dark": "156 163 175",
    #         "default-light": "75 85 99",
    #         "default-dark": "209 213 219",
    #         "important-light": "17 24 39",
    #         "important-dark": "243 244 246",
    #     },
    #     "primary": {
    #         "50": "250 245 255",
    #         "100": "243 232 255",
    #         "200": "233 213 255",
    #         "300": "216 180 254",
    #         "400": "192 132 252",
    #         "500": "168 85 247",
    #         "600": "147 51 234",
    #         "700": "126 34 206",
    #         "800": "107 33 168",
    #         "900": "88 28 135",
    #         "950": "59 7 100",
    #     },
    # },
    "EXTENSIONS": {
        "modeltranslation": {
            "flags": {
                "en": "ðŸ‡¬ðŸ‡§",
                "fr": "ðŸ‡«ðŸ‡·",
                "nl": "ðŸ‡§ðŸ‡ª",
                'ru': 'ru'
            },
        },
    },
    "SIDEBAR": {
        "show_search": True,  # Search in applications and models names
        "show_all_applications": True,  # Dropdown with all applications and models
        # "navigation": [
        #     {
        #         "title": _("Navigation"),
        #         "separator": True,  # Top border
        #         "collapsible": True,  # Collapsible group of links
        #         "items": [
        #             {
        #                 "title": _("Dashboard"),
        #                 "icon": "dashboard",  # Supported icon set: https://fonts.google.com/icons
        #                 "link": reverse_lazy("admin:index"),
        #                 "badge": "sample_app.badge_callback",
        #                 "permission": lambda request: request.user.is_superuser,
        #             },
        #             {
        #                 "title": _("Users"),
        #                 "icon": "people",
        #                 "link": reverse_lazy("admin:client_client_changelist"),
        #             },
        #         ],
        #     },
        # ],
    },
    # "TABS": [
    #     {
    #         "models": [
    #             "air_tickets_app.client",
    #         ],
    #         "items": [
    #             {
    #                 "title": _("ÐŸÐ¾Ð»ÑŒÐ·Ð¾Ð²Ð°Ñ‚ÐµÐ»Ð¸"),
    #                 "link": reverse_lazy("admin:air_tickets_app_client_changelist"),
    #                 "permission": "air_tickets.settings.permission_callback",
    #             },
    #         ],
    #     },
    # ],
}

def dashboard_callback(request, context):
    """
    Callback to prepare custom variables for index template which is used as dashboard
    template. It can be overridden in application by creating custom admin/index.html.
    """
    context.update(
        {
            "sample": "example",  # this will be injected into templates/admin/index.html
        }
    )
    return context


def environment_callback(request):
    """
    Callback has to return a list of two values represeting text value and the color
    type of the label displayed in top right corner.
    """
    return ["Production", "danger"]  # info, danger, warning, success


def badge_callback(request):
    return 3


def permission_callback(request):
    return request.user.has_perm("sample_app.change_model")


SECRET_KEY_CRYPTO = 'zpaaysmubsuisshkcohvk_a'


EMAIL_HOST = 'smtp.mail.ru'
EMAIL_PORT = 2525
EMAIL_HOST_USER = "discountsonservices@mail.ru"
EMAIL_HOST_PASSWORD = "6NDjmFYaAtTp0RxDETTN"
EMAIL_USE_TLS = True
EMAIL_USE_SSL = False
SERVER_EMAIL = EMAIL_HOST_USER
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER

